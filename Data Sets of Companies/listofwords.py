# To improve accuracy, we can add synonyms pertaining to each word (like 'risk', 'investment' etc)

import pandas as pd

risk = pd.DataFrame(['risk', 'danger', 'exposure', 'hazard', 'liability', 'opportunity', 'peril', 'possibility', 'prospect', 'uncertainity', 'accident', 'contingency', 'flyer', 'fortuity', 'fortune', 'gamble', 'header', 'jeopardy', 'luck', 'openness', 'plunge', 'speculation', 'stab', 'venture', 'wager', 'exposedness', 'liable'])
investment = pd.DataFrame(['investment', 'asset', 'contribution', 'expenditure', 'investment', 'expense', 'finance', 'financing', 'grant', 'loan', 'money', 'property', 'purchase', 'stake', 'transaction', 'venture', 'advance', 'ante', 'backing', 'bail', 'endowment', 'flutter', 'hunch', 'inside', 'interests', 'investing', 'piece', 'plunge', 'spec', 'speculation', 'stab', 'smart money', 'vested interests'])
entrepreneurship = pd.DataFrame(['entrepreneurship', 'administrator', 'contractor', 'executive', 'manager', 'producer', 'backer', 'businessperson', 'businessman', 'founder', 'industrialist', 'organiser', 'promoter', 'undertaker', 'enterprise', 'entrepreneurialism', 'entrepreneurism', 'capital', 'capitalism', 'industrailism'])
venture = pd.DataFrame(['venture', 'deal', 'endeavor', 'enterprise', 'investment', 'project', 'undertaking', 'adventure', 'baby', 'chance', 'essay', 'exploit', 'feat', 'hazard', 'header', 'peril', 'jeopardy', 'peril', 'proposition', 'pursuit', 'setup', 'shot', 'speculation', 'stab', 'stake', 'test', 'thing', 'trial', 'wager', 'product'])
novel = pd.DataFrame(['novel', 'different', 'innovative', 'odd', 'offbeat', 'colourful', 'peculiar', 'strange', 'unique', 'unusual', 'contemporary', 'avant-grade', 'now', 'recent', 'singular', 'cutting-edge', 'atypical', 'breaking-new', 'ground', 'farcry', 'fresh', 'funky', 'justout', 'modernistic', 'neoteric', 'new-fashioned', 'newfangled', 'rare', 'uncommon', 'unfamiliar'])
innovation = pd.DataFrame(['innovation', 'modernisation', 'addition', 'alteration', 'contraption', 'departure', 'deviation', 'introduction', 'modernism', 'modification', 'mutation', 'newness', 'notion', 'permutation', 'shift', 'variation', 'vicissitude', 'wrinkle', 'cutting-edge', 'last word', 'latest thing', 'leading edge'])
patent = pd.DataFrame(['patent', 'charter', 'concession', 'license', 'privilege', 'protection', 'control', 'franchise', 'limitation'])
divestiture = pd.DataFrame(['divestiture', 'disinvestment', 'divestment', 'dispossession', 'privation', 'divesture'])
acquire = pd.DataFrame(['acquire', 'achieve', 'amass', 'bring-in', 'buy', 'collect', 'earn', 'gain', 'get', 'have', 'pickup', 'promote', 'win', 'access', 'annex', 'attain', 'catch', 'cop', 'corral', 'gather', 'grab', 'hustle', 'land', 'procure', 'snag', 'secure', 'wangle', 'get hands on', 'get hold of', 'possess', 'possession'])
diversify = pd.DataFrame(['diversify', 'expand', 'transform', 'alter', 'assort', 'change', 'mix', 'modify', 'varigate', 'vary'])
failure = pd.DataFrame(['failure', 'bankruptcy', 'breakdown', 'collapse', 'decline', 'defeat', 'deficiency', 'deterioration', 'failing', 'loss', 'misstep', 'abortion', 'bomb', 'botch', 'bungle', 'bust', 'checkmate', 'decay', 'deficit', 'downfall', 'fiasco', 'flop', 'frustration', 'implosion', 'inadequacy', 'lemon', 'loser', 'mess', 'misadventure', 'miscarriage', 'nonperformance', 'overthrow', 'rout', 'rupture', 'stalemate', 'stoppage', 'turkey', 'washout', 'wreck'])
success = pd.DataFrame(['success', 'accomplisment', 'achievement', 'advance', 'benefit', 'boom', 'fame', 'gain', 'happiness', 'profit', 'progress', 'prosperity', 'realisation', 'triumph', 'victory', 'win', 'arrival', 'ascendency', 'attainment', 'clover', 'consummation', 'eminence', 'fortune', 'fruition', 'hit', 'killing', 'laughter', 'maturation', 'reward', 'savvy', 'sensation', 'snap', 'strike', 'successfulness', 'walkaway', 'walkover'])
family = pd.DataFrame(['family', 'clan', 'folk', 'group', 'house', 'household', 'people', 'tribe', 'ancestors', 'ancestor', 'ancestry', 'birth', 'blood', 'brood', 'children', 'class', 'descendants', 'descendant', 'descent', 'dynasty', 'extraction', 'forebears', 'genealogy', 'generations', 'genre', 'in-laws', 'inheritance', 'issue', 'kind', 'kindred', 'line', 'lineage', 'network', 'parentage', 'pedigree', 'progenitors', 'progeny', 'race', 'relations', 'relationship', 'relatives', 'siblings', 'strain', 'subdivision', 'system', 'heir', 'assigns', 'kith and kin', 'kin', 'kinship', 'menage', 'familial', 'family-like'])
house = pd.DataFrame(['house', 'household', 'clan', 'dynasty', 'folk', 'folks', 'kin', 'kindred', 'line', 'lineage', 'race', 'stock', 'tradition', 'tribe', 'family tree', 'menage', 'company', 'concern', 'corporation', 'firm', 'organisation', 'organization', 'outfit', 'partnership'])
tradition = pd.DataFrame(['tradition', 'attitude', 'belief', 'culture', 'custom', 'ethic', 'folklore', 'form', 'habit', 'heritage', 'idea', 'institution', 'law', 'legend', 'lore', 'myth', 'mythology', 'practice', 'ritual', 'wisdom', 'birthright', 'conclusion', 'convention', 'customs', 'ethics', 'fable', 'inheritance', 'mores', 'opinion', 'praxis', 'usage', 'mythos', 'unwritten law'])
history = pd.DataFrame(['history', 'past', 'antiquity', 'yesterday', 'yesteryear', 'ancient times', 'bygone times', 'account', 'annals', 'biography', 'record', 'relation', 'story', 'tale', 'biography', 'autobiography', 'diary', 'epic', 'journal', 'memoirs', 'narration', 'narrative', 'prehistory', 'recapitulation', 'recital', 'report', 'saga', 'version'])
reputation = pd.DataFrame(['reputation', 'character', 'fame', 'honor', 'honour', 'influence', 'name', 'notoriety', 'opinion', 'position', 'prestige', 'prominence', 'standing', 'stature', 'acceptability', 'account', 'approval', 'authority', 'credit', 'dependability', 'distinction', 'eminence', 'esteem', 'estimation', 'favor', 'mark', 'privilege', 'rank', 'regard', 'reliability', 'renown', 'rep', 'report', 'repute', 'respectability', 'trustworthiness', 'weight'])
proud = pd.DataFrame(['proud', 'pride', 'appreciative', 'glad', 'great', 'honoured', 'honored', 'illustrious', 'noble', 'satisfied', 'august', 'content', 'contended', 'dignified', 'eminent', 'fiery', 'fine', 'glorious', 'gorgeous', 'grand', 'gratified', 'gratifying', 'great-hearted', 'imposing', 'impressive', 'magnificent', 'majestic', 'memorable', 'memorable', 'red-letter', 'rewarding', 'satisfying', 'self-respecting', 'spirited', 'splendid', 'stately', 'sublime', 'superb', 'valiant', 'vigorous', 'well-pleased'])
empire = pd.DataFrame(['empire','authority', 'command', 'commonwealth', 'control', 'domain', 'dominion', 'federation', 'government', 'people', 'power', 'realm', 'sovereignty', 'supremacy', 'sway', 'union'])
son = pd.DataFrame(['son', 'boy', 'descendant', 'heir', 'offspring', 'dependant', 'junior', 'scion', 'child', 'descendant', 'heir', 'relative', 'sibling', 'ben', 'disciple', 'fils', 'lad', 'male', 'native'])
grandson = pd.DataFrame(['grandson', 'grandchildren', 'scion', 'sonny', 'son', 'nephew', 'offspring', 'daughter', 'grandchild', 'child', 'descendant', 'relative', 'grandsons', 'heiress', 'stepchild'])
sister = pd.DataFrame(['sister', 'relative', 'twin', 'kin', 'kinperson', 'relation', 'blood sister'])
brother = pd.DataFrame(['brother', 'relative', 'twin', 'kin', 'kinperson', 'relation', 'blood brother'])
parent = pd.DataFrame(['parent', 'father', 'mother', 'ancestor','architect','author', 'begetter', 'cause', 'center', 'creator', 'folks', 'forerunner', 'fountainhead','guardian', 'origin', 'originator', 'progenitor', 'prototype', 'root', 'source', 'wellspring', 'proceter'])
father = pd.DataFrame(['father', 'ancestor', 'dad', 'parent','predeccor','begetter', 'daddy','origin', 'Pa', 'padre','papa', 'pop', 'progenitor','sire','source', 'forebeared','provreator'])
grandfather = pd.DataFrame(['grandfather','ancestor', 'grandpa', 'patriarch', 'elder', 'forefather', 'gramps', 'granddad', 'granddaddy', 'pap', 'grandpappy','paternal forebear'])

synonyms = pd.concat([risk, investment, entrepreneurship, venture, novel, innovation, patent, divestiture, acquire, diversify, failure, success, family, house, tradition, history, reputation, proud, empire, son, grandson, sister, brother, parent, father, grandfather], ignore_index=True, axis=1)
